import Head from 'next/head'
import styles from '../styles/Home.module.css'
import React, { useEffect, useState } from 'react'
import io from 'Socket.IO-client'
import { useUser } from '@auth0/nextjs-auth0';
import { withPageAuthRequired } from '@auth0/nextjs-auth0';

// import { useAuth0 } from '@auth0/auth0-react'

let socket

// export default () => {
//   const { user, error, isLoading } = useUser();

//   if (isLoading) return <div>Loading...</div>;
//   if (error) return <div>{error.message}</div>;

//   if (user) {
//     return (
//       <div>
//         Welcome {user.name}! <a href="/api/auth/logout">Logout</a>
//       </div>
//     );
//   }
//   return <a href="/api/auth/login">Login</a>;
// };

export default function Home() {
  const [id, setId] = useState()
  const [armed, setArmed] = useState()
  const [number, setNumber] = useState()
  const [name, setName] = useState()
  const [users, setUsers] = useState([])
  const [doorlog, setDoorLog] = useState()
  const [loggedIn, setLoggedIn] = useState(false)
  const [phone, setPhone] = useState()
  const { user } = useUser()

  const armSystem = () => {
    socket.emit('armSystem')
  }

  const handleLogin = () => {
    setLoggedIn(!loggedIn)
    getSocket()
  }

  const sendMessage = async (e) => {
    console.log("calling method")
    await fetch('/api/sendMessage', {
      method: 'POST',
      headers: {
        'Content-Type': 'text/plain',
      },
      body: phone
    })
  }

  const clearLogs = () => {
    let confirm = window.confirm("Are you sure you want to clear log history?")
    if (confirm && socket) {
      socket.emit('clear')
    }
  }

  const getSocket = async () => {
    await fetch('/api/socket')
    socket = io()
    socket.emit('create', number)

    socket.emit('setNick', user.name)
    socket.on('connect', () => {
      console.log("connected!")
    })
    // console.log(number)
    socket.on('disconnect', () => {
      console.log(socket.id)
    })
    socket.on('updateId', (msg) => {
      setId(msg)
    })
    socket.on('armedSystem', (msg) => {
      setArmed(msg)
    })
    socket.on('getUsers', (msg) => {
      setUsers(msg)
    })
    socket.on('getDoorLog', (msg) => {
      // console.log(msg)
      setDoorLog(msg)
    })
    socket.on('updateDoor', () => {
      if (armed) {
        sendMessage()
      }
    })
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {
          loggedIn ?
            <>
              <h1>{user.name}</h1>
              <button style={{ backgroundColor: `${armed ? 'hsl(340deg 100% 32%)' : 'green'}` }} onClick={() => armSystem()} className={styles.pushable}>
                <span className={styles.shadow}></span>
                <span className={styles.edge}></span>
                <span style={{ backgroundColor: `${armed ? 'red' : 'hsl(119deg 100% 32%)'}` }} className={styles.front}>
                  {armed ? 'Arm System' : 'Disarm System'}
                </span>
              </button>

              <button style={{ backgroundColor: `hsla(176, 38%, 70%)`, margin: 25 }} className={styles.pushable}>
                <span className={styles.shadow}></span>
                <span className={styles.edge}></span>
                <span style={{ backgroundColor: 'lightblue' }} className={styles.front}>
                  Send Ping
                </span>
              </button>

              <div className={styles.grid} style={{ marginTop: 100 }}>
                <button style={{
                  position: 'relative', left: 80, top: -120, borderRadius: 100, border: 'none', color: 'blue', padding: 5,
                }}
                  onClick={() => clearLogs()}
                >Clear Logs</button>
                <div className={styles.card} style={{ overflowY: 'scroll' }}>
                  <h4>Door Log</h4>
                  <ul style={{ padding: 0, listStyleType: 'none' }}>
                    {
                      doorlog?.map((test, i) => {
                        return test.id === "Security Door" ?
                          <li key={i} style={{ marginBottom: 10 }}>
                            Door has been {test.entry} at {test.time}
                          </li>
                          :
                          <li key={i} style={{ marginBottom: 10 }}>
                            System <span>{test.armed ? <b>armed</b> : <b>disarmed</b>}</span> by {test.id} ({test.time})
                          </li>
                      })
                    }
                  </ul>
                </div>

                <div className={styles.card} >
                  <h4>Users Online</h4>
                  <ul style={{ padding: 0, listStyleType: 'none' }}>
                    {users.map((test, i) => <li key={i}>{test.name}</li>)}
                  </ul>
                </div>
              </div>
            </>
            :
            <div style={{ outline: '1px solid', padding: 100, display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>
              <h1>Login to Device</h1>
              <form id="form">
                <h3>Device #</h3>
                <input style={{ padding: 10 }} onChange={(e) => setNumber(e.target.value)} type="number" />
                <h3>Phone #</h3>
                <input style={{ padding: 10, marginBottom: 40 }} onChange={(e) => setPhone(e.target.value)} type="tel" />
              </form>
              <button style={{ backgroundColor: `hsla(248, 33%, 59%)` }} onClick={() => handleLogin()} className={styles.pushable}>
                <span className={styles.shadow}></span>
                <span className={styles.edge}></span>
                <span style={{ backgroundColor: 'hsla(248, 33%, 59%)' }} className={styles.front}>
                  Login
                </span>
              </button>
            </div>
        }
      </main >
    </div >
  )
}

export const getServerSideProps = withPageAuthRequired();
